// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	Text string `json:"text"`
}

type CommentInput struct {
	Text string `json:"text"`
}

type Game struct {
	ID       string     `json:"id"`
	Players  []*Player  `json:"players"`
	Comments []*Comment `json:"comments"`
	Status   GameStatus `json:"status"`
}

type Player struct {
	Name    string `json:"name"`
	Role    Role   `json:"role"`
	IsAlive bool   `json:"isAlive"`
}

type PlayerInput struct {
	Name    string `json:"name"`
	Role    Role   `json:"role"`
	IsAlive bool   `json:"isAlive"`
}

type GameStatus string

const (
	GameStatusNotFinished GameStatus = "NotFinished"
	GameStatusMafiaWon    GameStatus = "MafiaWon"
	GameStatusCivilianWon GameStatus = "CivilianWon"
)

var AllGameStatus = []GameStatus{
	GameStatusNotFinished,
	GameStatusMafiaWon,
	GameStatusCivilianWon,
}

func (e GameStatus) IsValid() bool {
	switch e {
	case GameStatusNotFinished, GameStatusMafiaWon, GameStatusCivilianWon:
		return true
	}
	return false
}

func (e GameStatus) String() string {
	return string(e)
}

func (e *GameStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameStatus", str)
	}
	return nil
}

func (e GameStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleCivilian  Role = "CIVILIAN"
	RoleMafia     Role = "MAFIA"
	RoleCommissar Role = "COMMISSAR"
)

var AllRole = []Role{
	RoleCivilian,
	RoleMafia,
	RoleCommissar,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleCivilian, RoleMafia, RoleCommissar:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
